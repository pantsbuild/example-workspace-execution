# This target is what invokes Bazel. The main point to note here is that the `{chroot}` symbol is replaced with the path to the temporary directory used during execution to materialize Pants-supplied inputs. 
shell_command(
  name="bazel-jvm-binary",
  command="bazel build --java_runtime_version=remotejdk_11 :ProjectRunner && cp bazel-bin/ProjectRunner.jar {chroot} && ls {chroot}",
  tools=["bazel", "gcc", "cp", "ls"],
  extra_env_vars=["HOME", "PATH"],
  workdir="bazel-jvm",
  output_files=["ProjectRunner.jar"],

  # This field sets what environment to execute the command in. The special value
  # `__local_workspace__` selects whatever configured `experimental_workspace_environment`
  # matches the current platform.
  environment="__local_workspace__",

  # The `path_env_modify` field allows you to disable modification of the PATH environment
  # variable by Pants. Since Bazel may incorporate the exact PATH value into its cache
  # key, this reduces the non-deteriminsm to invoking Bazel to allow Bazel to use its 
  # cache more effectively.
  path_env_modify="off",

  # Configure a longer timeout to give Bazel a chance to complete when necessary.
  timeout=600,
)

# For the sake of this example, we will just output the `ls -l` output to demonstrate
# that the jar built by Bazel is visible to Pants.
run_shell_command(
  name="run-from-bazel",
  command="ls -l {chroot}",
  execution_dependencies=[":bazel-jvm-binary"],
)

# This target configures in-workspace execution support. A few points of note:
# 1. This target accepts all of the same fields as any other environment target. Thus, you may customize various Pants options for just this environment.
# 2. The target address of this target must be configured in `environments-preview.names` section of `pants.toml` to be usable.
experimental_workspace_environment(
  name="workspace",
)
